//
//  MarsRoverViewController.swift
//  Desafio Beblue_LucasCordeiro
//
//  Created by Lucas Cordeiro on 03/03/19.
//  Copyright (c) 2019 Sparks. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lottie

protocol MarsRoverDisplayLogic: class {
    func displayMarsPhotos(viewModel: MarsRover.ListMarsRoverPhotos.ViewModel)
    func displayMarsPhotosPagination(viewModel: MarsRover.ListMarsRoverPhotos.ViewModel)
}

class MarsRoverViewController: UIViewController, MarsRoverDisplayLogic {

    //
    // MARK: - Scene Properties -
    var interactor: MarsRoverBusinessLogic?
    var router: (NSObjectProtocol & MarsRoverRoutingLogic & MarsRoverDataPassing)?

    //
    // MARK: - Outlets -
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var mainLoadingViewOutlet: LOTAnimationView!
    @IBOutlet weak var filterSegmentedControllOutlet: UISegmentedControl!

    //
    // MARK: - Local Properties -
    var marsRoverPhotos: [MarsRover.ListMarsRoverPhotos.ViewModel.MarsRoverPhoto] = []
    private let minNumberOfPhotos = 20

    //
    // MARK: - Routing -
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    //
    // MARK: - Life Cycle Methods -
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    static func storyboardInit() -> MarsRoverViewController {
        let storyboard = UIStoryboard(name: "MarsRover", bundle: nil)
        guard let viewController =
            storyboard.instantiateViewController(withIdentifier:
                MarsRoverViewController.classNameDescription()) as? MarsRoverViewController else {
                    assertionFailure("No view controller with" +
                        "\(MarsRoverViewController.classNameDescription()) identifier")
                    return MarsRoverViewController()
        }

        return viewController
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        configureCollectionViewCells()

        filterSegmentedControllOutlet.selectedSegmentIndex = 0
        loadMarsRoversPhotos(filter: .curiosity)
    }

    //
    // MARK: - Request Methods -
    func loadMarsRoversPhotos(filter: RoverPhotosFilter) {

        var date = Date()
        switch filter {
        case .curiosity:
            date = Date.date(fromString: "2019-03-01", withFormat: "yyyy-MM-dd") ?? Date()
        case .opportunity:
            date = Date.date(fromString: "2018-06-11", withFormat: "yyyy-MM-dd") ?? Date()
        case .spirit:
            date = Date.date(fromString: "2010-03-21", withFormat: "yyyy-MM-dd") ?? Date()
        }
        let request =
            MarsRover.ListMarsRoverPhotos.Request(filter: filter, date: date)
        mainLoadingViewOutlet.showAndPlay(loopAnimation: true)
        interactor?.listMarsRoverPhotos(request: request)
    }

    func paginate() {
        interactor?.paginateMarsRoverPhotos(request: nil)
    }

    //
    // MARK: - Display Methods -
    func displayMarsPhotos(viewModel: MarsRover.ListMarsRoverPhotos.ViewModel) {
        marsRoverPhotos = viewModel.marsRoverPhotos

        if marsRoverPhotos.count  < minNumberOfPhotos {
            paginate()
        } else if marsRoverPhotos.count > 1 {
            mainLoadingViewOutlet.hideAndStop()
        }
        collectionView.reloadData()
    }

    func displayMarsPhotosPagination(viewModel: MarsRover.ListMarsRoverPhotos.ViewModel) {
        marsRoverPhotos.append(contentsOf: viewModel.marsRoverPhotos)

        if marsRoverPhotos.count  < minNumberOfPhotos {
            paginate()
        } else if marsRoverPhotos.count > 1 {
            mainLoadingViewOutlet.hideAndStop()
        }
        collectionView.reloadData()
    }

    //
    // MARK: - Action Methodes -
    @IBAction func didChangeSegentedValue(_ sender: UISegmentedControl) {
        switch sender.selectedSegmentIndex {
        case 0:
            loadMarsRoversPhotos(filter: .curiosity)
        case 1:
            loadMarsRoversPhotos(filter: .opportunity)
        case 2:
            loadMarsRoversPhotos(filter: .spirit)
        default:
            assertionFailure("No segmented index implemented")
        }
    }

    //
    // MARK: - Configure Methods -
    private func setup() {
        let viewController = self
        let interactor = MarsRoverInteractor()
        let presenter = MarsRoverPresenter()
        let router = MarsRoverRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func configureCollectionViewCells() {
        MarsRoverPhotoCollectionViewCell.register(inCollection: collectionView)
    }
}

//
// MARK: - UIScrollViewDelegate Extension -
extension MarsRoverViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let currentOffset = scrollView.contentOffset.y
        let maximumOffset = scrollView.contentSize.height - scrollView.frame.size.height

        if currentOffset >= maximumOffset * 0.65 {
            paginate()
        }
    }
}

//
// MARK: - UICollectionViewDelegate Extension -
extension MarsRoverViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        interactor?.selectPhotoInfo(at: indexPath)
        router?.routeToPhotosDetail(segue: nil)
    }
}

//
// MARK: - UICollectionViewDelegate Extension -
extension MarsRoverViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return marsRoverPhotos.count
    }

    func collectionView(_ collectionView: UICollectionView,
                        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        guard let cell = collectionView.dequeueReusableCell(
            withReuseIdentifier: MarsRoverPhotoCollectionViewCell.classNameDescription(),
            for: indexPath) as? MarsRoverPhotoCollectionViewCell else {

                assertionFailure("No cell with " +
                    "\(MarsRoverPhotoCollectionViewCell.classNameDescription()) identifier registred")
                return UICollectionViewCell()
        }

        if indexPath.row < marsRoverPhotos.count {
            let url = marsRoverPhotos[indexPath.row].photosUrl
            cell.configureCell(photoUrl: url)
        }

        return cell
    }
}
